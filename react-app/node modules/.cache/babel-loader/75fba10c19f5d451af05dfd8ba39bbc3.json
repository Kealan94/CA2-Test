{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\CA2-Test\\\\react-app\\\\src\\\\components\\\\AddToCartButton.jsx\";\nimport React from 'react';\n\nclass AddToCartButton extends React.Component {\n  // This is a hack: here we register the current component\n  // with the cart class, so that when an item is added or\n  // removed, the current component will be updated. Proper\n  // global state could be used to do this is a safer way\n  componentDidMount() {\n    this.props.cart.registerAttachedComponent(this);\n  } // Render\n\n\n  render() {\n    if (this.props.cart.contains(this.props.product)) {\n      return React.createElement(\"a\", {\n        href: \"#!\",\n        className: \"btn btn-danger\",\n        onClick: this.handleClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"Remove from Cart\");\n    } else {\n      return React.createElement(\"a\", {\n        href: \"#!\",\n        className: \"btn btn-primary\",\n        onClick: this.handleClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Add to Cart\");\n    }\n  } // Executed when the add or remove form of the current component\n  // is clicked. Adds or removes this buttons item to the cart (toggle)\n\n\n  handleClick() {\n    if (this.props.cart.contains(this.props.product)) {\n      this.props.cart.removeFromCart(this.props.product);\n    } else {\n      this.props.cart.addToCart(this.props.product);\n    }\n  }\n\n}\n\nexport default AddToCartButton;","map":{"version":3,"sources":["C:/xampp/htdocs/CA2-Test/react-app/src/components/AddToCartButton.jsx"],"names":["React","AddToCartButton","Component","componentDidMount","props","cart","registerAttachedComponent","render","contains","product","handleClick","bind","removeFromCart","addToCart"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAN,SAA8BD,KAAK,CAACE,SAApC,CAA8C;AAE5C;AACA;AACA;AACA;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,IAAX,CAAgBC,yBAAhB,CAA0C,IAA1C;AACD,GAR2C,CAU5C;;;AACAC,EAAAA,MAAM,GAAG;AAEP,QAAI,KAAKH,KAAL,CAAWC,IAAX,CAAgBG,QAAhB,CAAyB,KAAKJ,KAAL,CAAWK,OAApC,CAAJ,EAAkD;AAChD,aACE;AAAG,QAAA,IAAI,EAAC,IAAR;AAAa,QAAA,SAAS,EAAC,gBAAvB;AAAwC,QAAA,OAAO,EAAE,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF;AAGD,KAJD,MAMK;AACH,aACE;AAAG,QAAA,IAAI,EAAC,IAAR;AAAa,QAAA,SAAS,EAAC,iBAAvB;AAAyC,QAAA,OAAO,EAAE,KAAKD,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF;AAGD;AACF,GAxB2C,CA0B5C;AACA;;;AACAD,EAAAA,WAAW,GAAI;AACb,QAAI,KAAKN,KAAL,CAAWC,IAAX,CAAgBG,QAAhB,CAAyB,KAAKJ,KAAL,CAAWK,OAApC,CAAJ,EAAkD;AAChD,WAAKL,KAAL,CAAWC,IAAX,CAAgBO,cAAhB,CAA+B,KAAKR,KAAL,CAAWK,OAA1C;AACD,KAFD,MAEO;AACL,WAAKL,KAAL,CAAWC,IAAX,CAAgBQ,SAAhB,CAA0B,KAAKT,KAAL,CAAWK,OAArC;AACD;AACF;;AAlC2C;;AAsC9C,eAAeR,eAAf","sourcesContent":["import React from 'react';\r\n\r\nclass AddToCartButton extends React.Component {\r\n\r\n  // This is a hack: here we register the current component\r\n  // with the cart class, so that when an item is added or\r\n  // removed, the current component will be updated. Proper\r\n  // global state could be used to do this is a safer way\r\n  componentDidMount() {\r\n    this.props.cart.registerAttachedComponent(this);\r\n  }\r\n\r\n  // Render\r\n  render() {\r\n\r\n    if (this.props.cart.contains(this.props.product)) {\r\n      return (\r\n        <a href='#!' className='btn btn-danger' onClick={this.handleClick.bind(this)}>Remove from Cart</a>\r\n      );\r\n    }\r\n\r\n    else {\r\n      return (\r\n        <a href='#!' className='btn btn-primary' onClick={this.handleClick.bind(this)}>Add to Cart</a>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Executed when the add or remove form of the current component\r\n  // is clicked. Adds or removes this buttons item to the cart (toggle)\r\n  handleClick () {\r\n    if (this.props.cart.contains(this.props.product)) {\r\n      this.props.cart.removeFromCart(this.props.product);\r\n    } else {\r\n      this.props.cart.addToCart(this.props.product)\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default AddToCartButton;"]},"metadata":{},"sourceType":"module"}