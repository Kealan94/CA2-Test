{"ast":null,"code":"export default class Cart {\n  constructor() {\n    this.items = [];\n    this.attachedComponents = [];\n  }\n\n  // Given a product object (from PHP api), returns true or\n  // false to indicate if the product is in the cart\n  contains(product) {\n    return this.cartIndexOf(product) !== -1;\n  } // Returns the index of a single item in the cart, or\n  // -1 i the item is not in the cart\n\n\n  cartIndexOf(product) {\n    return this.items.findIndex(each => each.id === product.id);\n  } // Add a single item to the cart\n\n\n  addToCart(product) {\n    if (!this.contains(product)) {\n      this.items.push(product);\n      this.updateComponents();\n    }\n  } // Remove a single item from the cart\n\n\n  removeFromCart(product) {\n    const cartIndex = this.cartIndexOf(product);\n\n    if (cartIndex !== -1) {\n      this.items.splice(cartIndex, 1);\n      this.updateComponents();\n    }\n  } // Return all products (array) in the cart\n\n\n  getProducts() {\n    return this.items;\n  } // Return a count of all of the products in the cart\n\n\n  getProductsCount() {\n    return this.items.length;\n  } // Returns the total price of all products in the cart\n\n\n  getTotalPrice() {\n    return this.items.reduce((acc, each) => {\n      return acc += parseFloat(each.price);\n    }, 0);\n  } // Hack: register a react component so that it can\n  // be updated when an item is added or removed from the\n  // cart\n\n\n  registerAttachedComponent(component) {\n    if (!!component.forceUpdate) {\n      this.attachedComponents.push(component);\n    }\n  } // Called whenever an item is added or removed, and\n  // calls the 'forceUpdate' method of all components\n  // that have been  registered. Also part of the hack\n\n\n  updateComponents() {\n    this.attachedComponents.forEach(component => {\n      if (!!component) {\n        component.forceUpdate();\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/xampp/htdocs/CA2-Test/react-app/src/lib/Cart.js"],"names":["Cart","items","attachedComponents","contains","product","cartIndexOf","findIndex","each","id","addToCart","push","updateComponents","removeFromCart","cartIndex","splice","getProducts","getProductsCount","length","getTotalPrice","reduce","acc","parseFloat","price","registerAttachedComponent","component","forceUpdate","forEach"],"mappings":"AAAA,eAAe,MAAMA,IAAN,CAAW;AAAA;AAAA,SAExBC,KAFwB,GAEH,EAFG;AAAA,SAGxBC,kBAHwB,GAGH,EAHG;AAAA;;AAKxB;AACA;AACAC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,WAAO,KAAKC,WAAL,CAAiBD,OAAjB,MAA8B,CAAC,CAAtC;AACD,GATuB,CAWxB;AACA;;;AACAC,EAAAA,WAAW,CAACD,OAAD,EAAU;AACnB,WAAO,KAAKH,KAAL,CAAWK,SAAX,CAAqBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAAjD,CAAP;AACD,GAfuB,CAiBxB;;;AACAC,EAAAA,SAAS,CAACL,OAAD,EAAU;AACjB,QAAI,CAAC,KAAKD,QAAL,CAAcC,OAAd,CAAL,EAA6B;AAC3B,WAAKH,KAAL,CAAWS,IAAX,CAAgBN,OAAhB;AACA,WAAKO,gBAAL;AACD;AACF,GAvBuB,CAyBxB;;;AACAC,EAAAA,cAAc,CAACR,OAAD,EAAU;AACtB,UAAMS,SAAS,GAAG,KAAKR,WAAL,CAAiBD,OAAjB,CAAlB;;AACA,QAAIS,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpB,WAAKZ,KAAL,CAAWa,MAAX,CAAkBD,SAAlB,EAA6B,CAA7B;AACA,WAAKF,gBAAL;AACD;AACF,GAhCuB,CAkCxB;;;AACAI,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKd,KAAZ;AACD,GArCuB,CAuCxB;;;AACAe,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKf,KAAL,CAAWgB,MAAlB;AACD,GA1CuB,CA4CxB;;;AACAC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKjB,KAAL,CAAWkB,MAAX,CAAkB,CAACC,GAAD,EAAMb,IAAN,KAAe;AACtC,aAAOa,GAAG,IAAIC,UAAU,CAACd,IAAI,CAACe,KAAN,CAAxB;AACD,KAFM,EAEJ,CAFI,CAAP;AAGD,GAjDuB,CAmDxB;AACA;AACA;;;AACAC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,QAAI,CAAC,CAACA,SAAS,CAACC,WAAhB,EAA6B;AAC3B,WAAKvB,kBAAL,CAAwBQ,IAAxB,CAA6Bc,SAA7B;AACD;AACF,GA1DuB,CA4DxB;AACA;AACA;;;AACAb,EAAAA,gBAAgB,GAAG;AACjB,SAAKT,kBAAL,CAAwBwB,OAAxB,CAAgCF,SAAS,IAAI;AAC3C,UAAI,CAAC,CAACA,SAAN,EAAiB;AACfA,QAAAA,SAAS,CAACC,WAAV;AACD;AACF,KAJD;AAKD;;AArEuB","sourcesContent":["export default class Cart {\r\n\r\n  items              = [];\r\n  attachedComponents = [];\r\n\r\n  // Given a product object (from PHP api), returns true or\r\n  // false to indicate if the product is in the cart\r\n  contains(product) {\r\n    return this.cartIndexOf(product) !== -1;\r\n  }\r\n\r\n  // Returns the index of a single item in the cart, or\r\n  // -1 i the item is not in the cart\r\n  cartIndexOf(product) {\r\n    return this.items.findIndex(each => each.id === product.id);\r\n  }\r\n\r\n  // Add a single item to the cart\r\n  addToCart(product) {\r\n    if (!this.contains(product)) {\r\n      this.items.push(product);\r\n      this.updateComponents();\r\n    }\r\n  }\r\n\r\n  // Remove a single item from the cart\r\n  removeFromCart(product) {\r\n    const cartIndex = this.cartIndexOf(product);\r\n    if (cartIndex !== -1) {\r\n      this.items.splice(cartIndex, 1);\r\n      this.updateComponents();\r\n    }\r\n  }\r\n\r\n  // Return all products (array) in the cart\r\n  getProducts() {\r\n    return this.items;\r\n  }\r\n\r\n  // Return a count of all of the products in the cart\r\n  getProductsCount() {\r\n    return this.items.length;\r\n  }\r\n\r\n  // Returns the total price of all products in the cart\r\n  getTotalPrice() {\r\n    return this.items.reduce((acc, each) => {\r\n      return acc += parseFloat(each.price);\r\n    }, 0);\r\n  }\r\n\r\n  // Hack: register a react component so that it can\r\n  // be updated when an item is added or removed from the\r\n  // cart\r\n  registerAttachedComponent(component) {\r\n    if (!!component.forceUpdate) {\r\n      this.attachedComponents.push(component);\r\n    }\r\n  }\r\n\r\n  // Called whenever an item is added or removed, and\r\n  // calls the 'forceUpdate' method of all components\r\n  // that have been  registered. Also part of the hack\r\n  updateComponents() {\r\n    this.attachedComponents.forEach(component => {\r\n      if (!!component) {\r\n        component.forceUpdate();\r\n      }\r\n    })\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}