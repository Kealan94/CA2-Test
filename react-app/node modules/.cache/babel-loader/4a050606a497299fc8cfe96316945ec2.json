{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\CA2-Test\\\\react-app\\\\src\\\\components\\\\ProductList.jsx\";\nimport React from 'react';\nimport Product from './Product';\nimport * as Config from '../config.json';\n\nclass ProductList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Note: this is our array of products that will be\n      // rendered. It starts life as a null object, this will\n      // be updated when the component mounts --  see\n      // componentDidMount event handler method\n      products: null,\n      productsRequested: false\n    };\n  }\n\n  // #######################################################\n  // # Render\n  // #######################################################\n  render() {\n    // Indicates there request to /products has been made, but\n    // there was some form of error\n    if (this.state.products === null && this.state.productsLoaded === true) {\n      return React.createElement(\"p\", {\n        className: \"text-center alert alert-warning mr-4 ml-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Error loading products. Try again later.\");\n    } // While the products array is null (meaning no attempt has\n    // yest been made to attempt to load the products from\n    // the php script)\n    else if (this.state.products === null) {\n        return React.createElement(\"p\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"Loading products...\");\n      } // If the products array is set, but is empty.\n      else if (this.state.products.length === 0) {\n          return React.createElement(\"p\", {\n            className: \"text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, \"Sorry, no products are available\");\n        } // Or, if there are items in the product list\n        else {\n            return (// For each product in the products array, we create\n              // a Product component (passing each product as a prop)\n              React.createElement(\"div\", {\n                className: \"product-list pt-3 pl-3 pr-3\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 55\n                },\n                __self: this\n              }, this.state.products.map(product => React.createElement(Product, {\n                product: product,\n                cart: this.props.cart,\n                key: \"product-\".concat(product.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 57\n                },\n                __self: this\n              })))\n            );\n          }\n  } // Invoked when the component is created in the DOM (like an onLoad)\n\n\n  componentDidMount() {\n    // Fetch from PHP script and update the products state value\n    // React will automatically 'react' to this change and re-render\n    // the ProductList component.\n    fetch(Config.api.getProducts).then(res => res.json()).then(json => {\n      this.setState({\n        products: json\n      });\n      this.setState({\n        productsLoaded: true\n      });\n    }).catch(err => {\n      this.setState({\n        productsLoaded: true\n      });\n    });\n  }\n\n}\n\nexport default ProductList;","map":{"version":3,"sources":["C:/xampp/htdocs/CA2-Test/react-app/src/components/ProductList.jsx"],"names":["React","Product","Config","ProductList","Component","state","products","productsRequested","render","productsLoaded","length","map","product","props","cart","id","componentDidMount","fetch","api","getProducts","then","res","json","setState","catch","err"],"mappings":";AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,OAAOC,OAAP,MAAwB,WAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;;AAEA,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAMxCC,KANwC,GAMhC;AACN;AACA;AACA;AACA;AACAC,MAAAA,QAAQ,EAAY,IALd;AAMNC,MAAAA,iBAAiB,EAAG;AANd,KANgC;AAAA;;AAexC;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AAEP;AACA;AACA,QAAI,KAAKH,KAAL,CAAWC,QAAX,KAAwB,IAAxB,IAAgC,KAAKD,KAAL,CAAWI,cAAX,KAA8B,IAAlE,EAAwE;AACtE,aACE;AAAG,QAAA,SAAS,EAAC,2CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADF;AAGD,KAJD,CAMA;AACA;AACA;AARA,SASK,IAAI,KAAKJ,KAAL,CAAWC,QAAX,KAAwB,IAA5B,EAAkC;AACrC,eACE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF;AAGD,OAJI,CAML;AANK,WAOA,IAAI,KAAKD,KAAL,CAAWC,QAAX,CAAoBI,MAApB,KAA+B,CAAnC,EAAsC;AACzC,iBACE;AAAG,YAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF;AAGD,SAJI,CAML;AANK,aAOA;AACH,mBACE;AACA;AACA;AAAK,gBAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACG,KAAKL,KAAL,CAAWC,QAAX,CAAoBK,GAApB,CAAwBC,OAAO,IAC9B,oBAAC,OAAD;AAAS,gBAAA,OAAO,EAAEA,OAAlB;AAA2B,gBAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,IAA5C;AAAkD,gBAAA,GAAG,oBAAaF,OAAO,CAACG,EAArB,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADH;AAHF;AASD;AACF,GAzDuC,CA2DxC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACAC,IAAAA,KAAK,CAACf,MAAM,CAACgB,GAAP,CAAWC,WAAZ,CAAL,CACGC,IADH,CACSC,GAAG,IAAKA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAI,IAAI;AACb,WAAKC,QAAL,CAAc;AAACjB,QAAAA,QAAQ,EAAEgB;AAAX,OAAd;AACA,WAAKC,QAAL,CAAc;AAACd,QAAAA,cAAc,EAAE;AAAjB,OAAd;AACD,KALH,EAMGe,KANH,CAMSC,GAAG,IAAI;AACZ,WAAKF,QAAL,CAAc;AAACd,QAAAA,cAAc,EAAE;AAAjB,OAAd;AACD,KARH;AASD;;AAzEuC;;AA6E1C,eAAeN,WAAf","sourcesContent":["import React       from 'react';\r\nimport Product     from './Product';\r\nimport * as Config from '../config.json'\r\n\r\nclass ProductList extends React.Component {\r\n\r\n  // #######################################################\r\n  // # Local state\r\n  // #######################################################\r\n\r\n  state = {\r\n    // Note: this is our array of products that will be\r\n    // rendered. It starts life as a null object, this will\r\n    // be updated when the component mounts --  see\r\n    // componentDidMount event handler method\r\n    products          : null,\r\n    productsRequested : false\r\n  }\r\n\r\n  // #######################################################\r\n  // # Render\r\n  // #######################################################\r\n\r\n  render() {\r\n\r\n    // Indicates there request to /products has been made, but\r\n    // there was some form of error\r\n    if (this.state.products === null && this.state.productsLoaded === true) {\r\n      return (\r\n        <p className='text-center alert alert-warning mr-4 ml-4'>Error loading products. Try again later.</p>\r\n      );\r\n    }\r\n\r\n    // While the products array is null (meaning no attempt has\r\n    // yest been made to attempt to load the products from\r\n    // the php script)\r\n    else if (this.state.products === null) {\r\n      return (\r\n        <p className='text-center'>Loading products...</p>\r\n      );\r\n    }\r\n\r\n    // If the products array is set, but is empty.\r\n    else if (this.state.products.length === 0) {\r\n      return (\r\n        <p className='text-center'>Sorry, no products are available</p>\r\n      );\r\n    }\r\n\r\n    // Or, if there are items in the product list\r\n    else {\r\n      return (\r\n        // For each product in the products array, we create\r\n        // a Product component (passing each product as a prop)\r\n        <div className='product-list pt-3 pl-3 pr-3'>\r\n          {this.state.products.map(product => (\r\n            <Product product={product} cart={this.props.cart} key={`product-${product.id}`} />\r\n          ))}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  // Invoked when the component is created in the DOM (like an onLoad)\r\n  componentDidMount() {\r\n    // Fetch from PHP script and update the products state value\r\n    // React will automatically 'react' to this change and re-render\r\n    // the ProductList component.\r\n    fetch(Config.api.getProducts)\r\n      .then (res  => res.json())\r\n      .then (json => {\r\n        this.setState({products: json});\r\n        this.setState({productsLoaded: true});\r\n      })\r\n      .catch(err => {\r\n        this.setState({productsLoaded: true});\r\n      })\r\n  }\r\n\r\n}\r\n\r\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}